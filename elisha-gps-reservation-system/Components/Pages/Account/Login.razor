@page "/login"
@inject NavigationManager Navigation
@inject ApplicationDbContext DbContext
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims
@using BCrypt.Net
@using elisha_gps_reservation_system.Components.Layout
@layout EmptyLayout

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">

<main class="main-content">
    <div class="content-wrapper">
        <div class="image-container">
            <img src="Images/cover.jpg" alt="Motorcycle" />
            <div class="overlay">
                <h1>Welcome Back!</h1>
                <p>Access your Elisha's Reservation account</p>
            </div>
        </div>
        <div class="form-container">
            <div class="signup-box">
                <div class="form-header">
                    <h2>Login</h2>
                    <p>Sign in to your account</p>
                </div>
                
                <EditForm Model="@Model" OnValidSubmit="VerifyCredentials" FormName="LoginForm">
                    <DataAnnotationsValidator />
                    <div class="input-group">
                        <i class="fas fa-user"></i>
                        <InputText @bind-Value="Model.Username" 
                                 type="text" 
                                 placeholder="Username or Email" 
                                 class="input-field" />
                    </div>
                    <ValidationMessage For="() => Model.Username" />
                    
                    <div class="input-group">
                        <i class="fas fa-lock"></i>
                        <InputText @bind-Value="Model.Password" 
                                 type="password" 
                                 placeholder="Password" 
                                 class="input-field" />
                    </div>
                    <ValidationMessage For="() => Model.Password" />
                    
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="error-message">
                            <i class="fas fa-exclamation-circle"></i>
                            <span>@errorMessage</span>
                        </div>
                    }
                    
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-sign-in-alt"></i>
                        Login
                    </button>
                </EditForm>
                
                <div class="or-divider">
                    <span>OR</span>
                </div>
                
                <a href="/signup" class="btn btn-secondary">
                    <i class="fas fa-user-plus"></i>
                    Create an Account
                </a>
                
                <p class="tos">
                    By signing in, you agree to our
                    <a href="#">Terms of Service</a> and
                    <a href="#">Privacy Policy</a>
                </p>
            </div>
        </div>
    </div>
</main>

@code 
{
    [CascadingParameter]
    public HttpContext? HttpContext{get; set;}

    [SupplyParameterFromForm]
    public LoginViewModel Model { get; set; } = new();

    private string? errorMessage;

    private async Task VerifyCredentials()
    {
          var UserAccount = DbContext.Users.FirstOrDefault(x => x.Username == Model.Username);
          if(UserAccount is null || !BCrypt.Verify(Model.Password, UserAccount.PasswordHash))
          {
             errorMessage = "Invalid Username or Password!";
             return;
          }

          bool isAdmin = UserAccount.Role == "Admin";

          var claims = new List<Claim>
          {
              new Claim(ClaimTypes.NameIdentifier, UserAccount.UserId.ToString()),
              new(ClaimTypes.Name, UserAccount.Username),
              new(ClaimTypes.Role, UserAccount.Role)
          };

          var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
          var principal = new ClaimsPrincipal(identity);
          await HttpContext?.SignInAsync(principal);

          // if admin redirect to dashboard
          if (isAdmin)
          {
            Navigation.NavigateTo("/adminDashboard");
          }
          else 
          {
            Navigation.NavigateTo("/");
          }
    }
}
