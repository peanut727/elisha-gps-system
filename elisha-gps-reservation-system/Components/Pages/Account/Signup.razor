@page "/signup"
@using BCrypt.Net
@using System.ComponentModel.DataAnnotations
@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer
@inject NavigationManager nav
@inject ApplicationDbContext DbContext
@using elisha_gps_reservation_system.Components.Layout
@layout EmptyLayout

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" />

<div class="min-h-screen bg-gray-50 flex items-center justify-center p-4 md:p-6">
    <div class="flex w-full max-w-5xl bg-white rounded-xl overflow-hidden shadow-xl">
        <!-- Left side - Image -->
        <div class="hidden lg:block relative w-5/12">
            <img src="Images/cover.jpg" alt="Motorcycle" class="w-full h-full object-cover" />
            <div class="absolute inset-0 bg-gradient-to-b from-black/30 to-black/70 flex flex-col justify-center p-8">
                <h1 class="text-3xl lg:text-4xl font-bold mb-3 text-white">Join Us Today!</h1>
                <p class="text-lg text-gray-200">Create your GPS Reservation account</p>
            </div>
        </div>

        <!-- Right side - Form -->
        <div class="flex-1 p-6 md:p-8 lg:p-10">
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="mb-6 p-3 bg-red-50 border-l-4 border-red-400 rounded-r text-sm text-red-700 flex items-center">
                    <i class="fas fa-exclamation-circle text-red-400 mr-2"></i>
                    @errorMessage
                </div>
            }

            <div class="mb-6">
                <h2 class="text-2xl font-bold text-gray-900">Sign Up</h2>
                <p class="text-sm text-gray-600 mt-1">Create your account</p>
            </div>

            <EditForm Model="registrationModel" OnValidSubmit="HandleValidSubmit" FormName="SignupForm" class="space-y-4">
                <DataAnnotationsValidator />

                <!-- Name Fields -->
                <div class="grid grid-cols-2 gap-3">
                    <div class="relative group">
                        <i class="fas fa-user absolute left-3 top-1/2 -translate-y-1/2 text-gray-400 transition-colors group-focus-within:text-[#f3b755]"></i>
                        <InputText @bind-Value="registrationModel.FirstName"
                                 placeholder="First Name"
                                 @oninput="OnFieldChanged"
                                 class="w-full pl-9 pr-3 py-2 rounded-lg border border-gray-300 text-sm focus:ring-1 focus:ring-[#f3b755] focus:border-[#f3b755] transition-colors" />
                        <ValidationMessage For="() => registrationModel.FirstName" class="mt-1 text-xs text-red-500" />
                    </div>

                    <div class="relative group">
                        <i class="fas fa-user absolute left-3 top-1/2 -translate-y-1/2 text-gray-400 transition-colors group-focus-within:text-[#f3b755]"></i>
                        <InputText @bind-Value="registrationModel.LastName"
                                 placeholder="Last Name"
                                 @oninput="OnFieldChanged"
                                 class="w-full pl-9 pr-3 py-2 rounded-lg border border-gray-300 text-sm focus:ring-1 focus:ring-[#f3b755] focus:border-[#f3b755] transition-colors" />
                        <ValidationMessage For="() => registrationModel.LastName" class="mt-1 text-xs text-red-500" />
                    </div>
                </div>

                <!-- Username & Email Fields -->
                <div class="space-y-3">
                    <div class="relative group">
                        <i class="fas fa-at absolute left-3 top-1/2 -translate-y-1/2 text-gray-400 transition-colors group-focus-within:text-[#f3b755]"></i>
                        <InputText @bind-Value="registrationModel.Username"
                                 placeholder="Username"
                                 @oninput="OnFieldChanged"
                                 class="w-full pl-9 pr-3 py-2 rounded-lg border border-gray-300 text-sm focus:ring-1 focus:ring-[#f3b755] focus:border-[#f3b755] transition-colors" />
                        <ValidationMessage For="() => registrationModel.Username" class="mt-1 text-xs text-red-500" />
                    </div>

                    <div class="relative group">
                        <i class="fas fa-envelope absolute left-3 top-1/2 -translate-y-1/2 text-gray-400 transition-colors group-focus-within:text-[#f3b755]"></i>
                        <InputText @bind-Value="registrationModel.Email"
                                 type="email"
                                 placeholder="Email"
                                 @oninput="OnFieldChanged"
                                 class="w-full pl-9 pr-3 py-2 rounded-lg border border-gray-300 text-sm focus:ring-1 focus:ring-[#f3b755] focus:border-[#f3b755] transition-colors" />
                        <ValidationMessage For="() => registrationModel.Email" class="mt-1 text-xs text-red-500" />
                    </div>
                </div>

                <!-- Password Fields -->
                <div class="space-y-3">
                    <div class="relative">
                        <div class="relative flex items-center">
                            <span class="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400 pointer-events-none">
                                <i class="fas fa-lock"></i>
                            </span>
                            <InputText @bind-Value="registrationModel.Password"
                                     type="@(showPassword ? "text" : "password")"
                                     placeholder="Password"
                                     @oninput="OnPasswordInput"
                                     @onfocus="ShowPasswordRequirements"
                                     class="w-full pl-9 pr-10 py-2 rounded-lg border border-gray-300 text-sm focus:ring-1 focus:ring-[#f3b755] focus:border-[#f3b755] transition-colors" />
                            <button type="button"
                                    @onclick="TogglePasswordVisibility"
                                    class="absolute right-3 top-1/2 -translate-y-1/2 text-gray-400 hover:text-[#f3b755] transition-colors">
                                <i class="fas @(showPassword ? "fa-eye-slash" : "fa-eye") text-sm"></i>
                            </button>
                        </div>
                        
                        @if (showPasswordRequirements || !IsPasswordValid)
                        {
                            <div class="mt-2 p-3 bg-gray-50 rounded-lg text-xs space-y-1.5 @(IsPasswordValid ? "animate-fade-out" : "")">
                                <p class="font-medium text-gray-700 mb-1.5">Password must contain:</p>
                                <div class="@GetRequirementClass(HasMinLength)">
                                    <i class="fas @(HasMinLength ? "fa-check" : "fa-times") w-4"></i>
                                    At least 8 characters
                                </div>
                                <div class="@GetRequirementClass(HasUpperCase)">
                                    <i class="fas @(HasUpperCase ? "fa-check" : "fa-times") w-4"></i>
                                    One uppercase letter
                                </div>
                                <div class="@GetRequirementClass(HasLowerCase)">
                                    <i class="fas @(HasLowerCase ? "fa-check" : "fa-times") w-4"></i>
                                    One lowercase letter
                                </div>
                                <div class="@GetRequirementClass(HasNumber)">
                                    <i class="fas @(HasNumber ? "fa-check" : "fa-times") w-4"></i>
                                    One number
                                </div>
                                <div class="@GetRequirementClass(HasSpecialChar)">
                                    <i class="fas @(HasSpecialChar ? "fa-check" : "fa-times") w-4"></i>
                                    One special character
                                </div>
                            </div>
                        }
                    </div>

                    <div class="relative">
                        <div class="relative flex items-center">
                            <span class="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400 pointer-events-none">
                                <i class="fas fa-lock"></i>
                            </span>
                            <InputText @bind-Value="registrationModel.ConfirmPassword"
                                     type="@(showPassword ? "text" : "password")"
                                     placeholder="Confirm Password"
                                     @oninput="OnFieldChanged"
                                     class="w-full pl-9 pr-10 py-2 rounded-lg border border-gray-300 text-sm focus:ring-1 focus:ring-[#f3b755] focus:border-[#f3b755] transition-colors" />
                            <button type="button"
                                    @onclick="TogglePasswordVisibility"
                                    class="absolute right-3 top-1/2 -translate-y-1/2 text-gray-400 hover:text-[#f3b755] transition-colors">
                                <i class="fas @(showPassword ? "fa-eye-slash" : "fa-eye") text-sm"></i>
                            </button>
                        </div>
                        @if (!string.IsNullOrEmpty(registrationModel.Password) && registrationModel.Password != registrationModel.ConfirmPassword)
                        {
                            <p class="mt-1 text-xs text-red-500">Passwords do not match</p>
                        }
                    </div>
                </div>

                <!-- Phone Field -->
                <div class="relative group">
                    <div class="flex">
                        <span class="inline-flex items-center px-3 rounded-l-lg border border-r-0 border-gray-300 bg-gray-50 text-gray-500 text-sm">
                            +63
                        </span>
                        <input value="@displayPhone"
                               @oninput="OnPhoneInput"
                               type="tel"
                               placeholder="9XX XXX XXXX"
                               class="w-full rounded-r-lg border border-gray-300 text-sm focus:ring-1 focus:ring-[#f3b755] focus:border-[#f3b755] transition-colors" />
                    </div>
                    @if (!string.IsNullOrEmpty(phoneError))
                    {
                        <div class="mt-1 text-xs text-red-500">@phoneError</div>
                    }
                    <ValidationMessage For="() => registrationModel.Phone" class="mt-1 text-xs text-red-500" />
                </div>

                <!-- Submit Button -->
                <button type="submit"
                        class="w-full flex justify-center items-center py-2.5 px-4 mt-2 bg-[#f3b755] hover:bg-[#e39a3c] text-white text-sm font-medium rounded-lg transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[#f3b755] disabled:opacity-50 disabled:cursor-not-allowed"
                        disabled="@(isLoading || !IsFormValid())">
                    @if (isLoading)
                    {
                        <div class="flex items-center">
                            <div class="animate-spin h-4 w-4 border-2 border-white border-t-transparent rounded-full mr-2"></div>
                            <span>Creating account...</span>
                        </div>
                    }
                    else
                    {
                        <i class="fas fa-user-plus text-sm mr-2"></i>
                        <span>Create Account</span>
                    }
                </button>

                <div class="relative my-6">
                    <div class="absolute inset-0 flex items-center">
                        <div class="w-full border-t border-gray-200"></div>
                    </div>
                    <div class="relative flex justify-center text-sm">
                        <span class="px-2 bg-white text-gray-500">OR</span>
                    </div>
                </div>

                <a href="/login"
                   class="w-full flex justify-center items-center py-2.5 px-4 bg-gray-50 hover:bg-gray-100 text-gray-700 text-sm font-medium rounded-lg transition-colors border border-gray-300">
                    <i class="fas fa-sign-in-alt text-sm mr-2"></i>
                    <span>Sign In</span>
                </a>

                <p class="text-center text-xs text-gray-600 mt-4">
                    By signing up, you agree to our
                    <a href="#" class="text-[#f3b755] hover:underline">Terms of Service</a> and
                    <a href="#" class="text-[#f3b755] hover:underline">Privacy Policy</a>
                </p>
            </EditForm>
        </div>
    </div>
</div>

@if (showSuccessModal)
{
    <div class="fixed inset-0 bg-black/50 flex items-center justify-center">
        <div class="bg-white rounded-lg shadow-lg p-4 w-96">
            <h2 class="text-lg font-bold mb-2">Account Created Successfully!</h2>
            <p class="text-sm text-gray-600 mb-4">You will be redirected to the login page shortly.</p>
            <button class="bg-[#f3b755] hover:bg-[#e39a3c] text-white text-sm font-medium rounded-lg py-2 px-4 transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[#f3b755]"
                    @onclick="RedirectToLogin">
                <i class="fas fa-sign-in-alt text-sm mr-2"></i>
                <span>Login Now</span>
            </button>
        </div>
    </div>
}

@code {
    private RegistrationModel registrationModel = new();
    private bool isLoading;
    private string? errorMessage;
    private bool showPassword;
    private Dictionary<string, bool> touchedFields = new();
    private string? phoneError;
    private string formattedPhone = string.Empty;
    private string displayPhone = string.Empty;
    private bool showSuccessModal = false;
    private bool showPasswordRequirements;
    private bool HasMinLength => registrationModel.Password.Length >= 8;
    private bool HasUpperCase => registrationModel.Password.Any(char.IsUpper);
    private bool HasLowerCase => registrationModel.Password.Any(char.IsLower);
    private bool HasNumber => registrationModel.Password.Any(char.IsDigit);
    private bool HasSpecialChar => registrationModel.Password.Any(c => !char.IsLetterOrDigit(c));
    private bool IsPasswordValid => HasMinLength && HasUpperCase && HasLowerCase && HasNumber && HasSpecialChar;

    private string GetRequirementClass(bool isMet) =>
        $"flex items-center {(isMet ? "text-green-600" : "text-red-500")}";

    private void OnFieldChanged(ChangeEventArgs e)
    {
        var fieldName = e.Value?.ToString() ?? string.Empty;
        touchedFields[fieldName] = true;
        phoneError = null;
        errorMessage = null;
    }

    private string GetFieldClass(string fieldName)
    {
        if (!touchedFields.ContainsKey(fieldName)) return string.Empty;
        return IsFieldValid(() => registrationModel.GetType().GetProperty(fieldName)?.GetValue(registrationModel)) 
               ? "valid" 
               : "invalid";
    }

    private bool IsFieldTouched(string fieldName) => touchedFields.ContainsKey(fieldName);

    private bool IsFieldValid(Func<object?> propertyGetter)
    {
        var value = propertyGetter();
        if (value == null) return false;

        var results = new List<ValidationResult>();
        var context = new ValidationContext(registrationModel);
        return Validator.TryValidateProperty(value, context, results);
    }

    private bool IsFormValid()
    {
        if (!touchedFields.Any()) return false;
        var context = new ValidationContext(registrationModel);
        var results = new List<ValidationResult>();
        return Validator.TryValidateObject(registrationModel, context, results, true);
    }

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }

    private void ShowPasswordRequirements()
    {
        showPasswordRequirements = true;
        StateHasChanged();
    }

    private void OnPasswordInput(ChangeEventArgs e)
    {
        if (e.Value is string value)
        {
            registrationModel.Password = value;
            touchedFields["Password"] = true;
            showPasswordRequirements = true;
            StateHasChanged();
        }
    }

    private void OnPhoneInput(ChangeEventArgs e)
    {
        if (e.Value is string value)
        {
            // Remove any non-digit characters from input
            var digitsOnly = new string(value.Where(char.IsDigit).ToArray());

            // Limit to 10 digits for local format
            if (digitsOnly.Length > 10)
            {
                digitsOnly = digitsOnly[..10];
            }

            // Store the full international format in the model
            registrationModel.Phone = "+63" + digitsOnly;
            
            // Store local format for display
            displayPhone = digitsOnly;

            // Format for display with spaces
            formattedPhone = digitsOnly.Length switch
            {
                10 => $"{digitsOnly[..1]} {digitsOnly[1..4]} {digitsOnly[4..7]} {digitsOnly[7..]}",
                > 7 => $"{digitsOnly[..1]} {digitsOnly[1..4]} {digitsOnly[4..7]} {digitsOnly[7..]}",
                > 4 => $"{digitsOnly[..1]} {digitsOnly[1..4]} {digitsOnly[4..]}",
                > 1 => $"{digitsOnly[..1]} {digitsOnly[1..]}",
                _ => digitsOnly
            };

            // Update validation message
            if (digitsOnly.Length == 0)
            {
                phoneError = "Phone number is required";
            }
            else if (digitsOnly.Length != 10)
            {
                phoneError = "Phone number must be 10 digits";
            }
            else if (digitsOnly[0] != '9')
            {
                phoneError = "Phone number must start with 9";
            }
            else
            {
                phoneError = null;
            }

            StateHasChanged();
        }
    }

    private async Task HandleValidSubmit()
    {
        if (!IsFormValid()) return;

        try
        {
            isLoading = true;
            errorMessage = null;

            // Check if username exists
            if (await DbContext.Users.AnyAsync(u => u.Username == registrationModel.Username))
            {
                errorMessage = "Username is already taken";
                return;
            }

            // Check if email exists
            if (await DbContext.Users.AnyAsync(u => u.Email == registrationModel.Email))
            {
                errorMessage = "Email is already registered";
                return;
            }

            var user = new User
            {
                FirstName = registrationModel.FirstName,
                LastName = registrationModel.LastName,
                Username = registrationModel.Username,
                Email = registrationModel.Email,
                Phone = registrationModel.Phone,
                PasswordHash = BCrypt.HashPassword(registrationModel.Password),
                Role = "Customer",
                CreatedAt = DateTime.UtcNow
            };

            DbContext.Users.Add(user);
            await DbContext.SaveChangesAsync();
            
            // Show success modal instead of immediate redirect
            showSuccessModal = true;
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while creating your account. Please try again.";
            Console.WriteLine($"Error during registration: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void RedirectToLogin()
    {
        nav.NavigateTo("/login");
    }

    public class RegistrationModel
    {
        [Required(ErrorMessage = "First name is required")]
        [StringLength(50, MinimumLength = 2, ErrorMessage = "First name must be between 2 and 50 characters")]
        [RegularExpression(@"^[a-zA-Z\s-']+$", ErrorMessage = "First name can only contain letters, spaces, hyphens and apostrophes")]
        public string FirstName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Last name is required")]
        [StringLength(50, MinimumLength = 2, ErrorMessage = "Last name must be between 2 and 50 characters")]
        [RegularExpression(@"^[a-zA-Z\s-']+$", ErrorMessage = "Last name can only contain letters, spaces, hyphens and apostrophes")]
        public string LastName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Username is required")]
        [StringLength(30, MinimumLength = 3, ErrorMessage = "Username must be between 3 and 30 characters")]
        [RegularExpression(@"^[a-zA-Z0-9_-]+$", ErrorMessage = "Username can only contain letters, numbers, underscores and hyphens")]
        public string Username { get; set; } = string.Empty;

        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email address")]
        [StringLength(100, ErrorMessage = "Email cannot exceed 100 characters")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        [StringLength(100, MinimumLength = 8, ErrorMessage = "Password must be at least 8 characters")]
        [RegularExpression(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$",
            ErrorMessage = "Password must contain at least one uppercase letter, one lowercase letter, one number and one special character")]
        public string Password { get; set; } = string.Empty;

        [Required(ErrorMessage = "Please confirm your password")]
        [Compare(nameof(Password), ErrorMessage = "Passwords do not match")]
        public string ConfirmPassword { get; set; } = string.Empty;

        [Required(ErrorMessage = "Phone number is required")]
        [RegularExpression(@"^\+639\d{9}$", ErrorMessage = "Please enter a valid phone number")]
        [MinLength(13, ErrorMessage = "Phone number must be complete")]
        [MaxLength(13, ErrorMessage = "Phone number must be complete")]
        public string Phone { get; set; } = string.Empty;
    }
}
