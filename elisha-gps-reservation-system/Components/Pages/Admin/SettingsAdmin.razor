@page "/settings"
@using System.ComponentModel.DataAnnotations
@inject ApplicationDbContext DbContext
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer
@attribute [Authorize(Roles = "Admin")]

<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <div class="bg-white rounded-2xl shadow-lg p-8">
        <!-- Header with underline -->
        <div class="relative mb-8">
            <h3 class="text-3xl font-bold text-gray-900">Account Settings</h3>
            <div class="absolute -bottom-2 left-0 w-16 h-1 bg-[#e39a3c] rounded-full"></div>
            <p class="mt-4 text-gray-600">Manage your account settings and security</p>
        </div>

        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="mb-8 bg-green-50 border-l-4 border-green-500 p-4 rounded-r-xl">
                <div class="flex">
                    <div class="flex-shrink-0">
                        <i class="fas fa-check-circle text-green-500"></i>
                    </div>
                    <div class="ml-3">
                        <p class="text-sm text-green-700">@successMessage</p>
                    </div>
                </div>
            </div>
        }

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="mb-8 bg-red-50 border-l-4 border-red-500 p-4 rounded-r-xl">
                <div class="flex">
                    <div class="flex-shrink-0">
                        <i class="fas fa-exclamation-circle text-red-500"></i>
                    </div>
                    <div class="ml-3">
                        <p class="text-sm text-red-700">@errorMessage</p>
                    </div>
                </div>
            </div>
        }

        <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
            <!-- Username Change Section -->
            <div class="bg-gray-50 rounded-xl p-6">
                <div class="flex items-center mb-6">
                    <div class="w-10 h-10 rounded-full bg-[#e39a3c]/10 flex items-center justify-center">
                        <i class="fas fa-user text-[#e39a3c] text-lg"></i>
                    </div>
                    <h2 class="ml-4 text-xl font-semibold text-gray-900">Change Username</h2>
                </div>

                <div class="space-y-6">
                    <div class="space-y-2">
                        <label class="block text-sm font-medium text-gray-700">Current Username</label>
                        <div class="relative">
                            <div class="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
                                <i class="fas fa-user text-gray-400"></i>
                            </div>
                            <input type="text" 
                                   @bind="currentUsername"
                                   disabled
                                   class="w-full pl-12 pr-4 py-3 border border-gray-300 rounded-xl
                                          bg-gray-100 text-gray-600
                                          text-base transition-colors" />
                        </div>
                    </div>

                    <div class="space-y-2">
                        <label class="block text-sm font-medium text-gray-700">New Username</label>
                        <div class="relative">
                            <div class="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
                                <i class="fas fa-user-edit text-gray-400"></i>
                            </div>
                            <input type="text" 
                                   @bind="newUsername"
                                   placeholder="Enter new username" 
                                   class="w-full pl-12 pr-4 py-3 border border-gray-300 rounded-xl
                                          focus:ring-2 focus:ring-[#e39a3c]/50 focus:border-[#e39a3c] 
                                          text-base placeholder-gray-400 transition-colors" />
                        </div>
                    </div>

                    <button @onclick="UpdateUsername" 
                            disabled="@(string.IsNullOrEmpty(newUsername) || isProcessing)"
                            class="w-full px-6 py-3 bg-[#e39a3c] text-white font-semibold rounded-xl
                                   hover:bg-[#e39a3c]/90 transition-colors duration-300 shadow-lg
                                   hover:shadow-xl transform hover:-translate-y-0.5 disabled:opacity-50
                                   disabled:cursor-not-allowed disabled:transform-none">
                        @if (isProcessing)
                        {
                            <i class="fas fa-circle-notch fa-spin mr-2"></i>
                            <span>Processing...</span>
                        }
                        else
                        {
                            <i class="fas fa-save mr-2"></i>
                            <span>Update Username</span>
                        }
                    </button>
                </div>
            </div>

            <!-- Password Change Section -->
            <div class="bg-gray-50 rounded-xl p-6">
                <div class="flex items-center mb-6">
                    <div class="w-10 h-10 rounded-full bg-[#e39a3c]/10 flex items-center justify-center">
                        <i class="fas fa-shield-alt text-[#e39a3c] text-lg"></i>
                    </div>
                    <h2 class="ml-4 text-xl font-semibold text-gray-900">Change Password</h2>
                </div>
                
                <div class="space-y-6">
                    <div class="space-y-2">
                        <label class="block text-sm font-medium text-gray-700">Current Password</label>
                        <div class="relative">
                            <div class="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
                                <i class="fas fa-lock text-gray-400"></i>
                            </div>
                            <input type="password" 
                                   @bind="currentPassword"
                                   placeholder="Enter current password" 
                                   class="w-full pl-12 pr-4 py-3 border border-gray-300 rounded-xl
                                          focus:ring-2 focus:ring-[#e39a3c]/50 focus:border-[#e39a3c] 
                                          text-base placeholder-gray-400 transition-colors" />
                        </div>
                    </div>
                    
                    <div class="space-y-2">
                        <label class="block text-sm font-medium text-gray-700">New Password</label>
                        <div class="relative">
                            <div class="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
                                <i class="fas fa-key text-gray-400"></i>
                            </div>
                            <input type="password" 
                                   @bind="newPassword"
                                   placeholder="Enter new password" 
                                   class="w-full pl-12 pr-4 py-3 border border-gray-300 rounded-xl
                                          focus:ring-2 focus:ring-[#e39a3c]/50 focus:border-[#e39a3c] 
                                          text-base placeholder-gray-400 transition-colors" />
                        </div>
                    </div>
                    
                    <div class="space-y-2">
                        <label class="block text-sm font-medium text-gray-700">Confirm Password</label>
                        <div class="relative">
                            <div class="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
                                <i class="fas fa-check-double text-gray-400"></i>
                            </div>
                            <input type="password" 
                                   @bind="confirmPassword"
                                   placeholder="Confirm new password" 
                                   class="w-full pl-12 pr-4 py-3 border border-gray-300 rounded-xl
                                          focus:ring-2 focus:ring-[#e39a3c]/50 focus:border-[#e39a3c] 
                                          text-base placeholder-gray-400 transition-colors" />
                        </div>
                    </div>

                    <button @onclick="UpdatePassword"
                            disabled="@(!IsPasswordUpdateValid() || isProcessing)"
                            class="w-full px-6 py-3 bg-[#e39a3c] text-white font-semibold rounded-xl
                                   hover:bg-[#e39a3c]/90 transition-colors duration-300 shadow-lg
                                   hover:shadow-xl transform hover:-translate-y-0.5 disabled:opacity-50
                                   disabled:cursor-not-allowed disabled:transform-none">
                        @if (isProcessing)
                        {
                            <i class="fas fa-circle-notch fa-spin mr-2"></i>
                            <span>Processing...</span>
                        }
                        else
                        {
                            <i class="fas fa-save mr-2"></i>
                            <span>Update Password</span>
                        }
                    </button>
                </div>

                <!-- Password Requirements -->
                <div class="mt-6 p-4 bg-blue-50 rounded-xl">
                    <div class="flex items-start space-x-3">
                        <i class="fas fa-info-circle text-blue-500 mt-1"></i>
                        <div>
                            <h4 class="text-sm font-medium text-blue-800">Password Requirements</h4>
                            <ul class="mt-2 text-sm text-blue-700 space-y-1">
                                <li class="flex items-center">
                                    <i class="@(IsPasswordLongEnough ? "fa-check text-green-500" : "fa-times text-gray-400") fas text-xs mr-2"></i>
                                    Minimum 8 characters long
                                </li>
                                <li class="flex items-center">
                                    <i class="@(HasUpperCase ? "fa-check text-green-500" : "fa-times text-gray-400") fas text-xs mr-2"></i>
                                    Include at least one uppercase letter
                                </li>
                                <li class="flex items-center">
                                    <i class="@(HasNumber ? "fa-check text-green-500" : "fa-times text-gray-400") fas text-xs mr-2"></i>
                                    Include at least one number
                                </li>
                                <li class="flex items-center">
                                    <i class="@(HasSpecialChar ? "fa-check text-green-500" : "fa-times text-gray-400") fas text-xs mr-2"></i>
                                    Include at least one special character
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string currentUsername = "";
    private string newUsername = "";
    private string currentPassword = "";
    private string newPassword = "";
    private string confirmPassword = "";
    private bool isProcessing = false;
    private string? successMessage;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        
        if (user.Identity?.IsAuthenticated ?? false)
        {
            currentUsername = user.Identity.Name ?? "";
        }
    }

    private async Task UpdateUsername()
    {
        try
        {
            isProcessing = true;
            errorMessage = null;
            successMessage = null;

            if (string.IsNullOrWhiteSpace(newUsername))
            {
                errorMessage = "New username cannot be empty.";
                return;
            }

            if (newUsername == currentUsername)
            {
                errorMessage = "New username must be different from current username.";
                return;
            }

            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            if (userId != null)
            {
                // Direct database update
                var user = await DbContext.Users.FindAsync(int.Parse(userId));
                if (user != null)
                {
                    // Check if username is taken
                    var existingUser = await DbContext.Users.FirstOrDefaultAsync(u => u.Username == newUsername);
                    if (existingUser != null)
                    {
                        errorMessage = "Username already taken.";
                        return;
                    }

                    user.Username = newUsername;
                    await DbContext.SaveChangesAsync();
                    successMessage = "Username updated successfully.";
                    currentUsername = newUsername;
                    newUsername = "";
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while updating username.";
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private async Task UpdatePassword()
    {
        try
        {
            isProcessing = true;
            errorMessage = null;
            successMessage = null;

            if (!IsPasswordUpdateValid())
            {
                errorMessage = "Please ensure all password requirements are met.";
                return;
            }

            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            if (userId != null)
            {
                // Direct database update
                var user = await DbContext.Users.FindAsync(int.Parse(userId));
                if (user != null)
                {
                    // Verify current password
                    if (BCrypt.Net.BCrypt.Verify(currentPassword, user.PasswordHash))
                    {
                        // Hash new password
                        user.PasswordHash = BCrypt.Net.BCrypt.HashPassword(newPassword);
                        await DbContext.SaveChangesAsync();
                        successMessage = "Password updated successfully.";
                        currentPassword = "";
                        newPassword = "";
                        confirmPassword = "";
                    }
                    else
                    {
                        errorMessage = "Current password is incorrect.";
                    }
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while updating password.";
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private bool IsPasswordUpdateValid()
    {
        return !string.IsNullOrEmpty(currentPassword) &&
               !string.IsNullOrEmpty(newPassword) &&
               !string.IsNullOrEmpty(confirmPassword) &&
               newPassword == confirmPassword &&
               IsPasswordLongEnough &&
               HasUpperCase &&
               HasNumber &&
               HasSpecialChar;
    }

    private bool IsPasswordLongEnough => newPassword.Length >= 8;
    private bool HasUpperCase => newPassword.Any(char.IsUpper);
    private bool HasNumber => newPassword.Any(char.IsDigit);
    private bool HasSpecialChar => newPassword.Any(c => !char.IsLetterOrDigit(c));
}
