@page "/customers"
@rendermode InteractiveServer
@inject ApplicationDbContext DbContext
@inject IConfiguration Configuration
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore;
@using BCrypt.Net
@attribute [Authorize(Roles = "Admin")]

<div class="max-w-[1600px] mx-auto px-4 sm:px-6 lg:px-8 py-6 font-sans">
    <div class="bg-white rounded-2xl shadow-lg p-6">
        <!-- Header with underline -->
        <div class="flex items-center justify-between mb-8">
            <div class="relative">
                <h3 class="text-2xl font-bold text-gray-900">Manage Customers</h3>
                <div class="absolute -bottom-2 left-0 w-20 h-1 bg-[#e39a3c] rounded-full"></div>
            </div>
            <div class="text-gray-600">
                <span class="font-semibold text-[#e39a3c]">@(FilteredUsers?.Count() ?? 0)</span> customers found
            </div>
        </div>

        @if (isLoading)
        {
            <div class="flex flex-col items-center justify-center p-12 min-h-[400px]">
                <div class="w-16 h-16 border-4 border-[#e39a3c] border-t-transparent rounded-full animate-spin"></div>
                <p class="mt-6 text-gray-600 text-base">Loading customers...</p>
            </div>
        }
        else if (showErrorModal)
        {
            <div class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50"
                 @onclick="() => showErrorModal = false">
                <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white"
                     @onclick:stopPropagation="true">
                    <div class="mt-3 text-center">
                        <div class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-red-100">
                            <i class="fas fa-exclamation-circle text-red-600 text-xl"></i>
                        </div>
                        <h3 class="text-lg leading-6 font-medium text-gray-900 mt-4">Error</h3>
                        <div class="mt-2 px-7 py-3">
                            <p class="text-sm text-gray-500">@error</p>
                        </div>
                        <div class="items-center px-4 py-3">
                            <button @onclick="() => showErrorModal = false"
                                    class="px-4 py-2 bg-red-500 text-white text-base font-medium rounded-md w-full shadow-sm hover:bg-red-600 focus:outline-none focus:ring-2 focus:ring-red-300">
                                Close
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
        else if (error != null)
        {
            <div class="bg-red-50 border-l-4 border-red-500 p-6 rounded-lg mb-6">
                <div class="flex items-center">
                    <i class="fas fa-exclamation-circle text-xl text-red-500 mr-4"></i>
                    <p class="text-red-700 text-base">@error</p>
                    <button class="ml-auto px-4 py-2 text-red-600 hover:text-red-800 text-base font-medium hover:bg-red-50 rounded-lg transition-colors" @onclick="RetryLoading">
                        <i class="fas fa-redo mr-2"></i>Retry
                    </button>
                </div>
            </div>
        }
        else if (FilteredUsers?.Any() != true)
        {
            <div class="flex flex-col items-center justify-center p-12 min-h-[400px] text-center">
                <div class="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mb-4">
                    <i class="fas fa-users text-gray-400 text-2xl"></i>
                </div>
                <h3 class="text-lg font-semibold text-gray-900 mb-2">No customers found</h3>
                <p class="text-gray-600">@(string.IsNullOrEmpty(searchTerm) ? "There are no customers in the system yet." : "Try adjusting your search terms.")</p>
            </div>
        }
        else
        {
            <div class="mb-6 space-y-4 sm:space-y-0 sm:flex sm:items-center sm:justify-between">
                <!-- Search Bar with clear button -->
                <div class="relative flex-1 max-w-xl">
                    <div class="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
                        <i class="fas fa-search text-gray-400 text-base"></i>
                    </div>
                    <input type="text" 
                           class="block w-full pl-12 pr-12 py-2.5 border border-gray-300 rounded-xl
                                  focus:ring-2 focus:ring-[#e39a3c]/50 focus:border-[#e39a3c] 
                                  text-base placeholder-gray-400 transition-colors"
                           placeholder="Search by name, email or phone..." 
                           @bind-value="searchTerm" 
                           @bind-value:event="oninput"/>
                    @if (!string.IsNullOrEmpty(searchTerm))
                    {
                        <button @onclick="() => searchTerm = string.Empty"
                                class="absolute inset-y-0 right-0 pr-4 flex items-center text-gray-400 hover:text-gray-600">
                            <i class="fas fa-times"></i>
                        </button>
                    }
                </div>

                <!-- Controls -->
                <div class="flex items-center space-x-6">
                    <label class="flex items-center space-x-3 cursor-pointer group">
                        <input type="checkbox" 
                               class="w-5 h-5 text-[#e39a3c] border-2 border-gray-300 rounded 
                                      focus:ring-[#e39a3c] focus:ring-offset-0 transition-colors" 
                               @bind="showIds" />
                        <span class="text-gray-700 text-base group-hover:text-[#e39a3c] transition-colors">Show IDs</span>
                    </label>

                    <div class="bg-gray-100 p-1 rounded-xl">
                        <div class="inline-flex rounded-lg shadow-sm">
                            <button type="button" 
                                    class="@(showCard ? "bg-white text-gray-700" : "bg-[#e39a3c] text-white") 
                                           px-4 py-2 rounded-lg border border-transparent
                                           hover:bg-[#e39a3c] hover:text-white transition-all duration-200" 
                                    @onclick="() => ToggleCardContent(false)">
                                <i class="fas fa-table text-base"></i>
                            </button>
                            <button type="button" 
                                    class="@(showCard ? "bg-[#e39a3c] text-white" : "bg-white text-gray-700") 
                                           px-4 py-2 rounded-lg border border-transparent
                                           hover:bg-[#e39a3c] hover:text-white transition-all duration-200 ml-1" 
                                    @onclick="() => ToggleCardContent(true)">
                                <i class="fas fa-tablet-screen-button text-base"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            @if (!showCard)
            {
                <div class="overflow-hidden bg-white rounded-xl shadow-md border border-gray-200">
                    <table class="min-w-full divide-y divide-gray-200">
                        <thead class="bg-[#e39a3c]">
                            <tr>
                                @if (showIds)
                                {
                                    <th class="px-6 py-3 text-left text-sm font-semibold text-white tracking-wider">ID</th>   
                                }
                                <th class="px-6 py-3 text-left text-lg font-semibold text-white tracking-wider">First Name</th>
                                <th class="px-6 py-3 text-left text-lg font-semibold text-white tracking-wider">Last Name</th>
                                <th class="px-6 py-3 text-left text-lg font-semibold text-white tracking-wider">Username</th>
                                <th class="px-6 py-3 text-left text-lg font-semibold text-white tracking-wider">Email</th>
                                <th class="px-6 py-3 text-left text-lg font-semibold text-white tracking-wider">Phone</th>
                                <th class="px-6 py-3 text-left text-lg font-semibold text-white tracking-wider">Actions</th>
                            </tr>
                        </thead>
                        <tbody class="divide-y divide-gray-200">
                            @foreach (var user in FilteredUsers)
                            {
                                <tr class="hover:bg-gray-50 transition-colors">
                                    @if (showIds)
                                    {
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">@user.UserId</td>   
                                    }
                                    <td class="px-6 py-4 whitespace-nowrap text-base font-bold text-gray-900">@user.FirstName</td>
                                    <td class="px-6 py-4 whitespace-nowrap text-base font-bold text-gray-900">@user.LastName</td>
                                    <td class="px-6 py-4 whitespace-nowrap text-base text-gray-500">@user.Username</td>
                                    <td class="px-6 py-4 whitespace-nowrap text-base text-gray-500">@user.Email</td>
                                    <td class="px-6 py-4 whitespace-nowrap text-base text-gray-500">@user.Phone</td>
                                    <td class="px-6 py-4 whitespace-nowrap text-base space-x-2">
                                        <button class="inline-flex items-center px-3 py-1.5 rounded-lg text-sm font-medium
                                                     text-white bg-red-500 hover:bg-red-600 
                                                     transition-colors duration-200 shadow-sm group relative" 
                                                @onclick="() => ArchiveUser(user.UserId)">
                                            <i class="fas fa-archive"></i>
                                            <div class="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-2 py-1 bg-gray-900 text-white text-xs rounded opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap">
                                                Archive user
                                            </div>
                                        </button>
                                        <button class="inline-flex items-center px-3 py-1.5 rounded-lg text-sm font-medium
                                                     text-white bg-[#e39a3c] hover:bg-[#e39a3c]/90
                                                     transition-colors duration-200 shadow-sm group relative" 
                                                @onclick="() => ResetPassword(user.UserId)">
                                            <i class="fas fa-key"></i>
                                            <div class="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-2 py-1 bg-gray-900 text-white text-xs rounded opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap">
                                                Reset password
                                            </div>
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
                    @foreach (var user in FilteredUsers)
                    {
                        <div class="bg-white rounded-xl shadow-md hover:shadow-lg transition-all duration-300 p-6 border border-gray-200">
                            <div class="space-y-4">
                                @if (showIds)
                                {
                                    <div class="text-sm text-gray-500 bg-gray-50 px-2 py-1 rounded-full inline-block">
                                        ID: @user.UserId
                                    </div>
                                }
                                <div class="flex items-center space-x-3">
                                    <div class="w-12 h-12 rounded-lg bg-[#e39a3c]/10 flex items-center justify-center">
                                        <i class="fas fa-user text-[#e39a3c] text-xl"></i>
                                    </div>
                                    <div>
                                        <h4 class="font-semibold text-gray-900">@user.FirstName @user.LastName</h4>
                                        <p class="text-sm text-gray-500">@user.Username</p>
                                    </div>
                                </div>
                                <div class="space-y-2 pt-2">
                                    <div class="flex items-center space-x-2 text-sm">
                                        <i class="fas fa-envelope text-gray-400 w-4"></i>
                                        <span class="text-gray-600">@user.Email</span>
                                    </div>
                                    <div class="flex items-center space-x-2 text-sm">
                                        <i class="fas fa-phone text-gray-400 w-4"></i>
                                        <span class="text-gray-600">@user.Phone</span>
                                    </div>
                                </div>
                                <div class="pt-4 flex justify-end space-x-2">
                                    <button class="inline-flex items-center px-3 py-1.5 rounded-lg text-sm font-medium
                                                 text-white bg-red-500 hover:bg-red-600 
                                                 transition-colors duration-200 shadow-sm group relative" 
                                            @onclick="() => ArchiveUser(user.UserId)">
                                        <i class="fas fa-archive mr-1.5"></i>
                                        Archive
                                        <div class="absolute bottom-full right-0 mb-2 px-2 py-1 bg-gray-900 text-white text-xs rounded opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap">
                                            Archive user
                                        </div>
                                    </button>
                                    <button class="inline-flex items-center px-3 py-1.5 rounded-lg text-sm font-medium
                                                 text-white bg-[#e39a3c] hover:bg-[#e39a3c]/90
                                                 transition-colors duration-200 shadow-sm group relative" 
                                            @onclick="() => ResetPassword(user.UserId)">
                                        <i class="fas fa-key mr-1.5"></i>
                                        Reset
                                        <div class="absolute bottom-full right-0 mb-2 px-2 py-1 bg-gray-900 text-white text-xs rounded opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap">
                                            Reset password
                                        </div>
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
        }
    </div>
</div>

@if (showSuccessModal)
{
    <div class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50"
         @onclick="() => showSuccessModal = false">
        <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white"
             @onclick:stopPropagation="true">
            <div class="mt-3 text-center">
                <div class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-green-100">
                    <i class="fas fa-check-circle text-green-600 text-xl"></i>
                </div>
                <h3 class="text-lg leading-6 font-medium text-gray-900 mt-4">Success</h3>
                <div class="mt-2 px-7 py-3">
                    <p class="text-sm text-gray-500">@successMessage</p>
                </div>
                <div class="items-center px-4 py-3">
                    <button @onclick="() => showSuccessModal = false"
                            class="px-4 py-2 bg-green-500 text-white text-base font-medium rounded-md w-full shadow-sm hover:bg-green-600 focus:outline-none focus:ring-2 focus:ring-green-300">
                        Close
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<User> users;
    private bool isLoading = true;
    private string error;
    private string successMessage;
    private bool showErrorModal = false;
    private bool showSuccessModal = false;
    private string searchTerm = "";
    private bool showIds = false;
    private bool showCard = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        try
        {
            isLoading = true;
            error = null;
            users = await DbContext.Users
                .Where(u => u.Role != "Admin" && !u.IsArchived)  // Filter out admins and archived users
                .ToListAsync();
        }
        catch (Exception ex)
        {
            error = "Failed to load users. Please try again.";
            showErrorModal = true;
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task RetryLoading()
    {
        await LoadUsers();
    }

    private void ToggleCardContent(bool showCardView)
    {
        showCard = showCardView;
    }

    private IEnumerable<User> FilteredUsers =>
        users?.Where(u =>
            !u.IsArchived &&  // Additional check for archived status
            (string.IsNullOrEmpty(searchTerm) ||
            u.FirstName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            u.LastName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            u.Email.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            u.Phone.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            u.Username.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
        ) ?? Enumerable.Empty<User>();

    private async Task ArchiveUser(int userId)
    {
        try
        {
            var user = await DbContext.Users.FindAsync(userId);
            if (user != null)
            {
                user.IsArchived = true;
                user.ArchivedAt = DateTime.UtcNow;
                await DbContext.SaveChangesAsync();
                users.Remove(user); // Remove from the displayed list
                successMessage = $"User {user.FirstName} {user.LastName} has been archived successfully.";
                showSuccessModal = true;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            error = "Failed to archive user. Please try again.";
            showErrorModal = true;
        }
    }

    private async Task ResetPassword(int userId)
    {
        try
        {
            var user = await DbContext.Users.FindAsync(userId);
            if (user != null)
            {
                string defaultPassword = Configuration["DefaultPassword"] ?? "Password123!";
                user.PasswordHash = BCrypt.HashPassword(defaultPassword);
                await DbContext.SaveChangesAsync();
            }
        }
        catch (Exception ex)
        {
            error = "Failed to reset password. Please try again.";
            showErrorModal = true;
        }
    }
}