@page "/RemoveVehicle"
@inject ApplicationDbContext DbContext
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@attribute [Authorize(Roles = "Admin")]

<div class="container mx-auto p-4">
    <h3 class="text-2xl font-bold mb-4">Manage Vehicles</h3>

    @if (isLoading)
    {
        <div class="flex items-center justify-center p-4">
            <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900"></div>
        </div>
    }
    else if (vehicles != null && vehicles.Any())
    {
        <div class="bg-white rounded-lg shadow">
            <ul class="divide-y divide-gray-200">
                @foreach (var vehicle in vehicles)
                {
                    <li class="p-4 hover:bg-gray-50 flex justify-between items-center">
                        <span class="text-lg">@vehicle.name</span>
                        <button class="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-md transition-colors"
                                @onclick="() => ConfirmRemoveCar(vehicle)">
                            Remove
                        </button>
                    </li>
                }
            </ul>
        </div>
    }
    else
    {
        <div class="text-center p-8 bg-gray-50 rounded-lg">
            <p class="text-gray-600">No vehicles available.</p>
        </div>
    }

    @if (showConfirmation)
    {
        <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
            <div class="bg-white p-6 rounded-lg shadow-lg max-w-md w-full mx-4">
                <h4 class="text-xl font-bold mb-4">Confirm Removal</h4>
                <p class="mb-6">Are you sure you want to remove @selectedVehicle?.name?</p>
                <div class="flex justify-end space-x-4">
                    <button class="px-4 py-2 bg-gray-200 rounded-md hover:bg-gray-300 transition-colors"
                            @onclick="CancelRemove">
                        Cancel
                    </button>
                    <button class="px-4 py-2 bg-red-500 text-white rounded-md hover:bg-red-600 transition-colors"
                            @onclick="ConfirmedRemove">
                        Remove
                    </button>
                </div>
            </div>
        </div>
    }

    @if (!string.IsNullOrEmpty(message))
    {
        <div class="fixed bottom-4 right-4 p-4 rounded-lg shadow-lg @(isError ? "bg-red-500" : "bg-green-500") text-white">
            @message
        </div>
    }
</div>

@code {
    private List<Vehicle> vehicles;
    private bool isLoading = false;
    private bool showConfirmation = false;
    private Vehicle selectedVehicle;
    private string message;
    private bool isError;

    protected override async Task OnInitializedAsync()
    {
        await LoadVehicles();
    }

    private async Task LoadVehicles()
    {
        try
        {
            isLoading = true;
            vehicles = await DbContext.Vehicles.ToListAsync();
        }
        catch (Exception ex)
        {
            ShowMessage("Failed to load vehicles.", true);
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ConfirmRemoveCar(Vehicle vehicle)
    {
        selectedVehicle = vehicle;
        showConfirmation = true;
    }

    private void CancelRemove()
    {
        showConfirmation = false;
        selectedVehicle = null;
    }

    private async Task ConfirmedRemove()
    {
        if (selectedVehicle == null) return;

        try
        {
            var vehicleToRemove = await DbContext.Vehicles.FindAsync(selectedVehicle.id);
            if (vehicleToRemove != null)
            {
                DbContext.Vehicles.Remove(vehicleToRemove);
                await DbContext.SaveChangesAsync();
                ShowMessage($"Successfully removed {selectedVehicle.name}.", false);
                await LoadVehicles();
            }
        }
        catch (Exception ex)
        {
            ShowMessage("Failed to remove vehicle.", true);
        }
        finally
        {
            showConfirmation = false;
            selectedVehicle = null;
        }
    }

    private void ShowMessage(string msg, bool error)
    {
        message = msg;
        isError = error;
        StateHasChanged();
        Task.Delay(3000).ContinueWith(_ =>
        {
            message = null;
            InvokeAsync(StateHasChanged);
        });
    }
}