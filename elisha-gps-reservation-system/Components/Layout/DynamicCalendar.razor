@rendermode InteractiveServer
@inject ApplicationDbContext DbContext
@inject NavigationManager Navigation
@inherits LayoutComponentBase

<script src="https://cdn.tailwindcss.com"></script>


<div class="w-full max-w-md mx-auto">
    <!-- Calendar Header -->
    <div class="flex items-center justify-between mb-6">
        <button @onclick="ShowPreviousMonth" 
                disabled="@IsPreviousButtonDisabled"
                class="p-2 rounded-lg text-gray-500 hover:bg-gray-100 disabled:opacity-50 disabled:cursor-not-allowed">
            <i class="fas fa-chevron-left"></i>
        </button>
        <h3 class="text-lg font-semibold text-gray-900">@CurrentMonthYear</h3>
        <button @onclick="ShowNextMonth"
                class="p-2 rounded-lg text-gray-500 hover:bg-gray-100">
            <i class="fas fa-chevron-right"></i>
        </button>
    </div>

    <!-- Days of the week -->
    <div class="grid grid-cols-7 gap-1 mb-2">
        <div class="text-center text-sm font-medium text-gray-500">Sun</div>
        <div class="text-center text-sm font-medium text-gray-500">Mon</div>
        <div class="text-center text-sm font-medium text-gray-500">Tue</div>
        <div class="text-center text-sm font-medium text-gray-500">Wed</div>
        <div class="text-center text-sm font-medium text-gray-500">Thu</div>
        <div class="text-center text-sm font-medium text-gray-500">Fri</div>
        <div class="text-center text-sm font-medium text-gray-500">Sat</div>
    </div>

    <!-- Calendar grid -->
    <div class="grid grid-cols-7 gap-1">
        @for (int i = 0; i < LeadingBlankDays; i++)
        {
            <div class="aspect-square p-1">
                <div class="w-full h-full rounded-lg bg-gray-50"></div>
            </div>
        }
        @foreach (var day in CalendarDays)
        {
            var dayClass = GetDayClass(day);
            var isAvailable = dayClass == "available";
            var isPending = dayClass == "pending";
            var isConfirmed = dayClass == "confirmed";
            var isDisabled = !isAvailable;
            var isPast = day.Date < DateTime.Now.Date;

            <div class="aspect-square p-1">
                <button @onclick="() => OnDayClick(day)"
                        disabled="@(isDisabled || isPast)"
                        class="w-full h-full rounded-lg flex items-center justify-center
                               text-sm font-medium transition-all duration-200
                               @(isAvailable && !isPast ? "hover:bg-[#f3b755]/10 hover:text-[#f3b755] cursor-pointer" : "cursor-not-allowed")
                               @(isPast ? "bg-gray-100 text-gray-400" : "")
                               @(isConfirmed ? "bg-red-100 text-red-700" : "")
                               @(isPending ? "bg-yellow-100 text-yellow-700" : "")
                               @(isAvailable && !isPast ? "bg-green-100 text-green-700" : "")">
                    @day.Day
                </button>
            </div>
        }
    </div>

    <!-- Legend -->
    <div class="mt-6 flex items-center justify-center space-x-4 text-sm">
        <div class="flex items-center">
            <div class="w-3 h-3 rounded-full bg-green-100 border border-gray-200 mr-2"></div>
            <span class="text-gray-600 font-bold">Available</span>
        </div>
        <div class="flex items-center">
            <div class="w-3 h-3 rounded-full bg-yellow-100 mr-2"></div>
            <span class="text-gray-600 font-bold">Pending</span>
        </div>
        <div class="flex items-center">
            <div class="w-3 h-3 rounded-full bg-red-100 mr-2"></div>
            <span class="text-gray-600 font-bold">Booked</span>
        </div>
    </div>
</div>

@code {
    [Parameter] public int vehicleId { get; set; }
    [Parameter] public EventCallback<DateTime> OnDateSelected { get; set; }
    private Vehicle? car;
    private List<DateTime> CalendarDays = new();
    private List<ReservationModel> ReservationsForVehicle = new();
    private DateTime CurrentMonth { get; set; } = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
    private int LeadingBlankDays { get; set; } = 0; // Days to offset at the start of the grid
    private bool IsPreviousButtonDisabled => CurrentMonth <= new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);

    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            car = await DbContext.Vehicles.FindAsync(vehicleId);

            if (car != null)
            {
                await LoadCalendarForMonth(CurrentMonth);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    // Method to load the calendar for the given month
    private async Task LoadCalendarForMonth(DateTime month)
    {
        // Start of the month
        var startDate = new DateTime(month.Year, month.Month, 1);

        // Day of the week for the 1st day (0 = S
        LeadingBlankDays = (int)startDate.DayOfWeek;

        // End of the month
        var endDate = startDate.AddMonths(1);

        // Generate calendar days
        CalendarDays = GenerateCalendarDays(startDate, endDate);

        // Load reserved dates for the vehicle
        ReservationsForVehicle = await GetReservationsForVehicle(vehicleId);
    }

    // Method to generate a list of days for the calendar
    private List<DateTime> GenerateCalendarDays(DateTime startDate, DateTime endDate)
    {
        var days = new List<DateTime>();
        for (var date = startDate; date < endDate; date = date.AddDays(1))
        {
            days.Add(date.Date); // Add only the date part (ignoring time)
        }

        return days;
    }

    // Get the reserved dates for the car
    private async Task<List<ReservationModel>> GetReservationsForVehicle(int vehicleId)
    {
        var reservations = await DbContext.Reservation
            .Where(r => r.VehicleId == vehicleId && r.Status != "Cancelled")
            .ToListAsync();

        Console.WriteLine($"Reservations for vehicle {vehicleId}: {reservations.Count}");
        foreach (var reservation in reservations)
        {
            Console.WriteLine($"ReservationID: {reservation.ReservationId}, StartDate: {reservation.StartDate}, EndDate: {reservation.EndDate}, Status: {reservation.Status}");
        }

        return reservations;
    }

    // Navigate to the reservation page
    private void NavigateToDetails(int vehicleId)
    {
        Navigation.NavigateTo($"/reservation/{vehicleId}");
    }

    // Helper method to get the CSS class for reserved days based on status
    private string GetDayClass(DateTime day)
    {
        // Check for any reservation that covers the current day, considering both start and end dates
        var reservation = ReservationsForVehicle.FirstOrDefault(r =>
            day.Date >= r.StartDate.Date && day.Date <= r.EndDate.Date); // Only compare the date part

        if (reservation == null) return "available"; // Available if no reservation matches the date
        return reservation.Status == "Confirmed" ? "confirmed" :
               reservation.Status == "Pending" ? "pending" : "available";
    }

    // Show previous month
    private async Task ShowPreviousMonth()
    {
        var startOfCurrentMonth = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
        if (CurrentMonth > startOfCurrentMonth)
        {
            CurrentMonth = CurrentMonth.AddMonths(-1);
            await LoadCalendarForMonth(CurrentMonth);
        }
    }

    // Show next month
    private async Task ShowNextMonth()
    {
        CurrentMonth = CurrentMonth.AddMonths(1);
        await LoadCalendarForMonth(CurrentMonth);
    }

    // Get the current month and year as a string
    private string CurrentMonthYear => $"{CurrentMonth:MMMM yyyy}";

    private async Task OnDayClick(DateTime selectedDate)
    {
        if (GetDayClass(selectedDate) == "available")
        {
            await OnDateSelected.InvokeAsync(selectedDate);
        }
    }
}
